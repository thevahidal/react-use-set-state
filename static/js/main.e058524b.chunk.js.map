{"version":3,"sources":["../../src/utils.js","../../src/index.js","App.js","index.js"],"names":["isFunction","func","toString","call","initialState","newWithPrevState","newState","state","setState","App","useSetState","searchQuery","data","loading","counter","React","useEffect","fetch","then","response","json","interval","setInterval","prevState","clearInterval","onChange","e","target","value","placeholder","map","d","key","id","title","ReactDOM","render","document","getElementById"],"mappings":"y2DACO,IAAMA,EAAa,SAACC,GACvB,OAAOA,GAAP,sBAAe,GAAGC,SAASC,KAAKF,I,ECEhB,WAAuB,IAAtBG,EAAsB,uDAAP,GAClC,EAA0B,sBACxB,cACE,IAAMC,EAAmBL,KAAuBM,EAAvBN,GAAzB,EACA,sBAHJ,YAAOO,EAAP,KAAcC,EAAd,KAUA,MAAO,CAACD,EAAR,ICsCaE,EAlDH,WACV,MAA0BC,EAAY,CACpCC,YAAa,GACbC,KAAM,GACNC,SAAS,EAETC,QAAS,IALX,mBAAOP,EAAP,KAAcC,EAAd,KAyBA,OAjBAO,IAAMC,WAAU,WACdR,EAAS,CAACK,SAAS,IACnBI,MAAM,wDAAD,OAAyDV,EAAMI,cACjEO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJZ,EAAS,CAACI,KAAMQ,EAAMP,SAAS,SAElC,CAACN,EAAMI,cAEVI,IAAMC,WAAU,WACd,IAAMK,EAAWC,aAAY,WAC3Bd,GAAS,SAAAe,GAAS,MAAK,CAACT,QAASS,EAAUT,QAAU,QACpD,KAEH,OAAO,kBAAMU,cAAcH,MAC1B,IAEK,oCACN,6BACE,4CACA,2BACEI,SAAU,SAACC,GACTlB,EAAS,CAACG,YAAae,EAAEC,OAAOC,SAElCA,MAAOrB,EAAMI,YACbkB,YAAa,sBAEf,4BACGtB,EAAMM,QAAU,aAAcN,EAAMK,KAAKkB,KAAI,SAAAC,GAAC,OAC7C,wBAAIC,IAAKD,EAAEE,IAAKF,EAAEG,YAIxB,6BACA,6BACE,yDACA,sCACA,2BAAI3B,EAAMO,YC3ChBqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.e058524b.chunk.js","sourcesContent":["// Credits: https://stackoverflow.com/a/7356528/1930464\nexport const isFunction = (func) => {\n    return func && {}.toString.call(func) === '[object Function]';\n}","import * as React from 'react'\n\nimport { isFunction } from './utils'\n\nconst useSetState = (initialState = {}) => {\n  const [state, setState] = React.useReducer(\n    (state, newState) => {\n      const newWithPrevState = isFunction(newState) ? newState(state) : newState\n      return (\n        {...state, ...newWithPrevState}\n      )\n    },\n    initialState\n  )\n\n  return [state, setState]\n}\n\n\nexport default useSetState","import React from 'react'\nimport useSetState from 'react-use-set-state'\n\nconst App = () => {\n  const [state, setState] = useSetState({\n    searchQuery: '',\n    data: [],\n    loading: true,\n\n    counter: 0,\n  })\n\n  React.useEffect(() => {\n    setState({loading: true})\n    fetch(`https://jsonplaceholder.typicode.com/users/1/todos?q=${state.searchQuery}`)\n      .then(response => response.json())\n      .then(json => {\n        setState({data: json, loading: false})\n      })\n  }, [state.searchQuery])\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setState(prevState => ({counter: prevState.counter + 1}))\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return (<>\n    <div>\n      <h1>Normal Usage</h1>\n      <input \n        onChange={(e) => {\n          setState({searchQuery: e.target.value})\n        }}\n        value={state.searchQuery}\n        placeholder={'Type to search...'}\n      />\n      <ul>\n        {state.loading ? 'Loading...': state.data.map(d => (\n          <li key={d.id}>{d.title}</li>\n        ))}\n      </ul>\n    </div>\n    <hr />\n    <div>\n      <h1>Usage with Previous State</h1>\n      <p>Counter</p>\n      <p>{state.counter}</p>\n    </div>\n  </>)\n}\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}